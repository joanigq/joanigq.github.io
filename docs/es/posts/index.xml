<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Joan Gonzalez</title>
        <link>http://joanigq.github.io/es/posts/</link>
        <description>Recent content in Posts on Joan Gonzalez</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 13 Jan 2023 23:19:16 -0300</lastBuildDate>
        <atom:link href="http://joanigq.github.io/es/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Hugo and GitHub Pages</title>
            <link>http://joanigq.github.io/es/posts/2023/01/hugo-and-github-pages/</link>
            <pubDate>Fri, 13 Jan 2023 23:19:16 -0300</pubDate>
            
            <guid>http://joanigq.github.io/es/posts/2023/01/hugo-and-github-pages/</guid>
            <description>Having a webpage is pretty important nowadays, but starting off might be difficult for many, specially if you don&amp;rsquo;t wanna use paid services like website builders, and/or pay for a hosting domain. An alternative to all that can be static site generators, tools like Hugo (upon which is build this website) that can generate all the proper files for a website, based off a sort of template, then writing posts (like this one!</description>
            <content type="html"><![CDATA[<p>Having a webpage is pretty important nowadays, but starting off might be difficult for many, specially if you don&rsquo;t wanna use paid services like website builders, and/or pay for a hosting domain. An alternative to all that can be <em>static site generators</em>, tools like Hugo (upon which is build this website) that can generate all the proper files for a website, based off a sort of template, then writing posts (<em>like this one!</em>) can be done by just writing in Markdown language. For hosting, there&rsquo;s a few free options, but today we&rsquo;ll be exploring GitHub Pages.</p>
<p>This can be a little more coding-oriented than the other options, but it&rsquo;s very flexible, maintainable and, best of all, free!</p>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>A confortable coding-oriented text editor and/or enviornment like <a href="https://code.visualstudio.com/">Visual Studio Code</a> or <a href="sublimetext.com">Sublime Text</a>.</li>
<li>A <a href="https://github.com/">GitHub</a> account.</li>
<li>A working <a href="https://www.gitforwindows.org">Git</a> or <a href="https://desktop.github.com/">GitHub Desktop</a> installation.</li>
<li>Some basic GitHub knowledge. (<a href="https://docs.github.com/en/get-started/quickstart">Here is a quickstart!</a>)</li>
<li>Some basic <a href="https://www.markdownguide.org/">Markdown</a> knowledge.</li>
</ul>
<p>Also, I&rsquo;ll be writing all of this for a Windows operating system, but the steps can be easily be translated for Linux operating systems, too. Because of this, I used the packet manager <a href="https://chocolatey.org/install">Chocolatey</a> for installing Hugo.</p>
<p>If you don&rsquo;t wanna use Chocolatey, you can check out the other ways to install it from <a href="https://gohugo.io/installation/">their webpage</a>.</p>
<p>You can confirm that Hugo is properly installed if typing <code>hugo version</code> on the Windows shell (CMD) or PowerShell, returns the installed version.</p>
<pre><code class="language-powershell">PS C:\Users\joan&gt; hugo version
hugo v0.109.0
</code></pre>
<h2 id="set-up-the-working-directory">Set up the working directory</h2>
<p>Because we&rsquo;ll want to host the webpage generated by Hugo on GitHub Pages, we need a special GitHub repository.</p>
<ol>
<li>
<p>Logged into your account, <a href="https://github.com/new/">create a new public repository</a>, this is where all the webpage&rsquo;s files will be. GitHub will then host your website using the files located there. The name of the repository should be <code>[USERNAME].github.io</code>, replacing <code>[USERNAME]</code> with your GitHub username, for example <code>joangq.github.io</code>.</p>
</li>
<li>
<p>Once the repository is created, clone it into a folder and open it using whatever editor you like.</p>
</li>
<li>
<p>In the repo&rsquo;s folder, run the command</p>
</li>
</ol>
<pre><code class="language-powershell">hugo new site .\ --force
</code></pre>
<p>We <code>--force</code> the installation, because otherwise we&rsquo;ll get a warning telling us that the directory isn&rsquo;t empty, you should have the <code>LICENSE</code>and <code>README.md</code> files there as well.</p>
<p>After running the command, a whole file structure should be created.</p>
<h2 id="download-a-hugo-theme">Download a Hugo theme</h2>
<p>Although we could create a custom theme from the ground up, for a quick start it&rsquo;s best to simply install one. Pick and download one from the <a href="https://themes.gohugo.io/">hugo library</a> or from somewhere else.</p>
<p>For example, I&rsquo;m using a modified version of the <a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng"><code>hello-friend-ng</code></a> theme.</p>
<p>A very useful tool for installing these themes is <strong>reading</strong> their instructions, which can vary from package to package. In my case, instead of cloning its contents, I  installed it as a git submodule by running the following command, straight from its <code>README</code> file:</p>
<pre><code class="language-powershell">PS ~\joanigq.github.io&gt; git submodule add &quot;https://github.com/rhazdon/hugo-theme-hello-friend-ng.git&quot; themes/hello-friend-ng
</code></pre>
<h2 id="configure-the-theme">Configure the theme</h2>
<p>You&rsquo;ll find that nearly every Hugo theme will talk about changing the contents of the <code>config.toml</code> file, which is located in the <code>[USERNAME].github.io\</code> folder, if you open it you should see something like this:</p>
<pre><code class="language-toml">baseURL = 'http://example.org/'
languageCode = 'en-US'
title = 'My New Hugo Site'
</code></pre>
<p>Luckily, the theme I&rsquo;m using has an <a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng/blob/master/exampleSite/config.toml">example file</a> which I can copy-paste into my <code>config.toml</code> file. Different themes will have a different setup, but most of them will ask you to change the default <code>config</code>.</p>
<h2 id="test-the-website-locally">Test the website locally</h2>
<p>You should pretty much be ready to go! Let&rsquo;s test the site.
First, you should make sure that the field <code>baseURL</code> is <code>localhost</code>.</p>
<pre><code class="language-toml"># config.toml
baseURL = 'localhost' # &lt;-- For hosting locally
title   = &quot;Hello Friend NG&quot;
languageCode = &quot;en-us&quot;
theme = &quot;hello-friend-ng&quot;
# ...
</code></pre>
<p>Then, run <code>hugo server</code> at the root of the directory, like this:</p>
<pre><code class="language-powershell">PS ~\joanigq.github.io&gt; hugo server    
</code></pre>
<p>It should print out something like this:</p>
<pre><code class="language-powershell">Start building sites … 

                   | EN 
-------------------+----
  Pages            | 14 
  Paginator pages  |  0 
  Non-page files   |  0 
  Static files     | 13 
  Processed images |  0 
  Aliases          |  8 
  Sitemaps         |  2 
  Cleaned          |  0 

Built in 111 ms
Watching for changes in ~\joanigq.github.io\{archetypes,assets,content,data,layouts,static,themes}
Watching for config changes in ~\joanigq.github.io\config.toml
Environment: &quot;development&quot;
Serving pages from memory
Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender
Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)
Press Ctrl+C to stop
</code></pre>
<p>Now open up your preferred browser, and type <code>http://localhost:1313</code> directly in the address bar, your website should show up! If it does, then you&rsquo;re basically done, now let&rsquo;s customize it!</p>
<h2 id="customize-your-website">Customize your website</h2>
<p>This is a content-oriented theme, which means that if you downloaded it, you&rsquo;ll probably be writing posts. The way Hugo works is that you write your posts in Markdown inside <code>/content/</code> and then Hugo automatically builds a page using templates located in the <code>/archetypes/</code> folder. To use the theme&rsquo;s templates, copy all the contents of <code>/themes/[THEME]/archetypes</code> into <code>/archetypes/</code>, replacing the necessary files.</p>
]]></content>
        </item>
        
        <item>
            <title>Example Post</title>
            <link>http://joanigq.github.io/es/posts/2023/01/example-post/</link>
            <pubDate>Fri, 13 Jan 2023 17:45:28 -0300</pubDate>
            
            <guid>http://joanigq.github.io/es/posts/2023/01/example-post/</guid>
            <description>Éste código hace cosas import requestsdef hagoAlgo(x:int, a:list, b:str) -&amp;gt; None:return;# &amp;lt;----&amp;gt; &amp;lt;==&amp;gt; &amp;lt;| --- |&amp;gt; |=&amp;gt;if __name__ == &amp;quot;__main__&amp;quot;:hagoAlgo(1, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;], &amp;quot;jeje&amp;quot;)print(&#39;Hola, Mundo!&#39;)$$y_t = \beta_0 + \beta_1 x_t + \epsilon_t$$</description>
            <content type="html"><![CDATA[<h3 id="éste-código-hace-cosas">Éste código hace cosas</h3>
<pre><code class="language-python">import requests

def hagoAlgo(x:int, a:list, b:str) -&gt; None:
  return;


# &lt;----&gt; &lt;==&gt; &lt;| --- |&gt; |=&gt;

if __name__ == &quot;__main__&quot;:
  hagoAlgo(1, ['a','b','c'], &quot;jeje&quot;)
  print('Hola, Mundo!')

</code></pre>
<p>$$y_t = \beta_0 + \beta_1 x_t + \epsilon_t$$</p>
]]></content>
        </item>
        
    </channel>
</rss>
